package com.example.urlshortener.service;

import com.example.urlshortener.dto.ResponseObject;
import com.example.urlshortener.exception.InvalidRequestException;
import com.example.urlshortener.model.UrlMapping;
import com.example.urlshortener.dto.UrlObject;
import com.example.urlshortener.repository.UrlRepository;
import com.example.urlshortener.util.HashingUtil;
import com.example.urlshortener.util.UrlNormalizer;
import org.apache.commons.validator.routines.UrlValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UrlShorteningService{

    private final UrlNormalizer urlNormalizer;
    private final UrlRepository urlRepository;
    private final HashingUtil hashingUtil;

    @Autowired
    public UrlShorteningService(UrlRepository urlRepository, UrlNormalizer urlNormalizer, HashingUtil hashingUtil) {
        this.urlRepository = urlRepository;
        this.urlNormalizer = urlNormalizer;
        this.hashingUtil = hashingUtil;
    }

    private static final Logger log = LoggerFactory.getLogger(UrlShorteningService.class);

    public String getShortenedId(String url){
        // Hashes the URL provided to store in redis
        String normalizedUrl = urlNormalizer.normalizeUrl(url);
        String id = hashingUtil.getMurmurHashValue(normalizedUrl);
        log.debug("URL id generated: {}",id);

        urlRepository.save(new UrlMapping(id, url));
        log.debug("URL id={} stored in database.",id);
        return id;
    }

    public String getLongUrl(String id){
        log.debug("Id received by service: {}",id);
        String url = urlRepository.findById(id)
                .map(UrlMapping::getOriginalUrl)
                .orElse(null);
        log.debug("Url generated by service: {}",url);
        return url;
    }

    public ResponseObject validateUrl(UrlObject urlObject){
        if(urlObject == null || urlObject.getUrl() == null || urlObject.getUrl().isEmpty()) {
            log.error("Url object is null / empty");
            throw new InvalidRequestException("400", "Url Object cannot be null or empty");
        }

        if(!urlObject.getUrl().startsWith("http://") && !urlObject.getUrl().startsWith("https://")){
            urlObject.setUrl("http://"+urlObject.getUrl());
        }

        UrlValidator urlValidator = new UrlValidator();
        if(!urlValidator.isValid(urlObject.getUrl())){
            log.error("Invalid Url");
            throw new InvalidRequestException("400", "Invalid Url");
        }
        return null;
    }
}