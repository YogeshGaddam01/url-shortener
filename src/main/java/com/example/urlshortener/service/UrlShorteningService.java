package com.example.urlshortener.service;

import com.example.urlshortener.model.Response;
import com.example.urlshortener.model.UrlMapping;
import com.example.urlshortener.model.UrlObject;
import com.example.urlshortener.repository.UrlRepository;
import com.google.common.hash.Hashing;
import org.apache.commons.validator.routines.UrlValidator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import java.nio.charset.StandardCharsets;
import java.util.Optional;

@Service
public class UrlShorteningService{

    UrlRepository urlrepository;

    @Autowired
    public UrlShorteningService(UrlRepository urlrepository) {
        this.urlrepository = urlrepository;
    }

    private static final Logger log = LoggerFactory.getLogger(UrlShorteningService.class);

    public String getShortenedId(String originalUrl){
        // Hashes the URL provided to store in redis
        String id = Hashing.murmur3_32().hashString(originalUrl, StandardCharsets.UTF_8).toString();
        log.debug("URL id generated: {}",id);

        urlrepository.save(new UrlMapping(id, originalUrl));
        log.debug("URL id={} stored in redis database.",id);
        return id;
    }

    public String getLongUrl(String id){
        log.debug("Id received by service: {}",id);
        Optional<UrlMapping> optionalUrlMapping = urlrepository.findById(id);
        String url = optionalUrlMapping.map(UrlMapping::getOriginalUrl).orElse(null);
        log.debug("Url generated by service: {}",url);
        return url;
    }

    public ResponseEntity<?> validateUrl(UrlObject urlObject){
        if(urlObject == null) {
            log.error("Url object is null");
            return ResponseEntity.badRequest().body(new Response("400","Url Object cannot be null"));
        }
        if(urlObject.getUrl().isEmpty()) {
            log.error("Url is empty");
            return ResponseEntity.badRequest().body(new Response("400","Url cannot be empty"));
        }

        UrlValidator urlValidator = new UrlValidator();
        if(!urlValidator.isValid(urlObject.getUrl())){
            log.error("Invalid Url");
            return ResponseEntity.badRequest().body(new Response("400","Invalid Url"));
        }
        return null;
    }
}